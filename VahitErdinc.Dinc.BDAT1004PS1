{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1\n",
    "What data type is each of the following?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Data               | Data Type                                                                              |                \n",
    "| :---              |-----------------:                                                                      |          \n",
    "| 5                 | Integer                                                                                | \n",
    "| 5.0               | Float Point Type(Double, Float etc.)                                                   |  \n",
    "| 5 > 1             | Boolean                                                                                |  \n",
    "| '5'               | Character                                                                              |  \n",
    "| 5 * 2             | Integer                                                                                |  \n",
    "| '5' * 2           | Integer                                                                                |   \n",
    "| '5' + '2'         | Integer                                                                                |  \n",
    "| 5 / 2             | Float Point Type(Double, Float etc.)                                                   |  \n",
    "| 5 // 2            | Integer(Since C# will see 2 as commented.)                                             |  \n",
    "| [5, 2, 1]         | Integer                                                                                |   \n",
    "| 5 in [1, 4, 6]    | Boolean                                                                                |  \n",
    "| Pi                | Float Point Type(Double, Float etc.)                                                   |  \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2\n",
    "Write (and evaluate) C# expressions that answer these questions:\n",
    "a. How many letters are there in 'Supercalifragilisticexpialidocious'?\n",
    "b. Does 'Supercalifragilisticexpialidocious' contain 'ice' as a substring?\n",
    "c. Which of the following words is the longest:\n",
    "Supercalifragilisticexpialidocious, Honorificabilitudinitatibus, or\n",
    "Bababadalgharaghtakamminarronnkonn?\n",
    "d. Which composer comes first in the dictionary: 'Berlioz', 'Borodin', 'Brian',\n",
    "'Bartok', 'Bellini', 'Buxtehude', 'Bernstein'. Which one comes last?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "using System;\n",
    "\n",
    "namespace Question2\n",
    "{\n",
    "    class Program\n",
    "    {\n",
    "        static void Main(string[] args)\n",
    "        {\n",
    "            string GivenName = \"Supercalifragilisticexpialidocious\";\n",
    "            int a = GivenName.Length;\n",
    "            Console.WriteLine(\"a)Length of it {0} is {1}.\\n\", GivenName, GivenName.Length);\n",
    "            string SubString = \"ice\";\n",
    "            Console.WriteLine(\"b)\"+GivenName.Contains(SubString)+\"\\n\");\n",
    "            string GivenName2 = \"Honorificabilitudinitatibus\";\n",
    "            int b = GivenName2.Length;\n",
    "            string GivenName3 = \"Bababadalgharaghtakamminarronnkonn\";\n",
    "            int c = GivenName2.Length;\n",
    "            Console.Write(\"c)\");\n",
    "            if (a > b)\n",
    "            {\n",
    "                if (a > c)\n",
    "                {\n",
    "                    Console.WriteLine(GivenName + \"is the longest in these 3 words.\");\n",
    "                }\n",
    "                else if (a == c)\n",
    "                {\n",
    "                    Console.WriteLine(GivenName + \" and \" + GivenName3 + \" have same length and the longest in these 3 words.\");\n",
    "                }\n",
    "                else\n",
    "                {\n",
    "                    Console.WriteLine(GivenName3 + \" is the longest in these 3 words.\");\n",
    "                }\n",
    "            }\n",
    "            else if (a < b)\n",
    "            {\n",
    "                if (b > c)\n",
    "                {\n",
    "                    Console.WriteLine(GivenName2 + \" is the longest in these 3 words.\");\n",
    "                }\n",
    "                else if (b == c)\n",
    "                {\n",
    "                    Console.WriteLine(GivenName2 + \" and \" + GivenName3 + \" have same length and the longest in these 3 words.\");\n",
    "                }\n",
    "                else\n",
    "                {\n",
    "                    Console.WriteLine(GivenName3 + \" is the longest in these 3 words.\");\n",
    "                }\n",
    "            }\n",
    "            else\n",
    "            {\n",
    "                if (a > c)\n",
    "                {\n",
    "                    Console.WriteLine(GivenName + \" and \" + GivenName2 + \" are the longest in these 3 words.\");\n",
    "                }\n",
    "                else if (a == c)\n",
    "                {\n",
    "                    Console.WriteLine(\"They all have same lengths.\");\n",
    "                }\n",
    "                else\n",
    "                {\n",
    "                    Console.WriteLine(GivenName3 + \"is the longest in these 3 words.\");\n",
    "                }\n",
    "            }\n",
    "            string[] names = { \"Berlioz\", \"Borodin\", \"Brian\", \"Bartok\", \"Bellini\", \"Buxtehude\", \"Bernstein\" };\n",
    "            \n",
    "            Array.Sort(names);\n",
    "\n",
    "            Console.Write(\"\\nd)\" + names[0] + \"comes first in dictionary and \" + names[6] + \" comes last in the dictionary.\\n\");\n",
    "\n",
    "\n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 2 Output\n",
    "\n",
    "<center><img src=\"Answer2.png\"></center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3\n",
    "Implement function triangleArea(a,b,c) that takes as input the lengths of the 3\n",
    "sides of a triangle and returns the area of the triangle. By Heron's formula, the area\n",
    "of a triangle with side lengths a, b, and c is\n",
    "s(s - a)(s -b)(s -c)\n",
    ", where\n",
    "s = (a+b+c)/2. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "using System;\n",
    "\n",
    "namespace Question3\n",
    "\n",
    "{\n",
    "    class Program\n",
    "{\n",
    "\n",
    "    static void Main(string[] args)\n",
    "    {\n",
    "        Console.Write(\"Please write length of 1st side: \");\n",
    "        double firstSide = Convert.ToDouble(Console.ReadLine());\n",
    "        Console.Write(\"Please write length of 1st side: \");\n",
    "        double secondSide = Convert.ToDouble(Console.ReadLine());\n",
    "        Console.Write(\"Please write length of 1st side: \");\n",
    "        double thirdSide = Convert.ToDouble(Console.ReadLine());\n",
    "        triangleArea(firstSide, secondSide, thirdSide);\n",
    "\n",
    "    }\n",
    "\n",
    "\n",
    "    private static int triangleArea(double a, double b, double c)\n",
    "    {\n",
    "        double s = (a + b + c) / 2;\n",
    "        double Area = Math.Sqrt((s * (s - a) * (s - b) * (s - c)));\n",
    "        Console.WriteLine(\"{0} is the area of the given triangle \", Area);\n",
    "        return 0;\n",
    "    }\n",
    "\n",
    "}\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 3 Output\n",
    "<center><img src=\"Answer3.png\"></center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4\n",
    "Write a program in C# Sharp to separate odd and even integers in separate arrays."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "using System;\n",
    "using System.Collections;\n",
    "\n",
    "namespace Question4\n",
    "{\n",
    "    class Program\n",
    "    {\n",
    "        static void Main(string[] args)\n",
    "        {\n",
    "            ArrayList oddArray = new ArrayList();\n",
    "            ArrayList evenArray = new ArrayList();\n",
    "            Console.Write(\"Input the number of elements to be stored in the array: \");\n",
    "            int Size  = Convert.ToInt32(Console.ReadLine());\n",
    "            int[] wholeArray = new int [Size] ;\n",
    "            \n",
    "            for (int i=0; i<Size; i++)\n",
    "            {\n",
    "                Console.Write(\"Input {0} element of the Array: \", i);\n",
    "                wholeArray[i] = Convert.ToInt32(Console.ReadLine());\n",
    "                if (wholeArray[i]%2==0)\n",
    "                {\n",
    "                    evenArray.Add(wholeArray[i]);\n",
    "                    \n",
    "                }\n",
    "                else\n",
    "                {\n",
    "                    oddArray.Add(wholeArray[i]);\n",
    "                    \n",
    "                }\n",
    "\n",
    "            }\n",
    "            Console.Write(\"The Even elements are\\n\");\n",
    "\n",
    "            for (int i = 0; i < evenArray.Count; i++)\n",
    "            {\n",
    "                Console.Write(evenArray[i] + \" \");\n",
    "            }\n",
    "\n",
    "            Console.Write(\"\\nThe Odd elements are\\n\" );\n",
    "\n",
    "            for(int i=0; i<oddArray.Count;i++)\n",
    "            {\n",
    "                Console.Write(oddArray[i]+ \" \");\n",
    "            }\n",
    "            \n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 4 Output\n",
    "<center><img src=\"Answer4.png\"></center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5\n",
    "a. Write a function inside(x,y,x1,y1,x2,y2) that returns True or False\n",
    "depending on whether the point (x,y) lies in the rectangle with lower left\n",
    "corner (x1,y1) and upper right corner (x2,y2).\n",
    "\n",
    "b. Use function inside() from part a. to write an expression that tests whether\n",
    "the point (1,1) lies in both of the following rectangles: one with lower left\n",
    "corner (0.3, 0.5) and upper right corner (1.1, 0.7) and the other with lower\n",
    "left corner (0.5, 0.2) and upper right corner (1.1, 2). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 5 a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "using System;\n",
    "\n",
    "namespace Question5\n",
    "{\n",
    "    class Program\n",
    "    {\n",
    "        static void Main(string[] args)\n",
    "        {\n",
    "            Console.Write(\"Please write the 'X' coordinate of the lower corner of the rectangle: \");\n",
    "            double leftX= Convert.ToDouble(Console.ReadLine());\n",
    "            Console.Write(\"Please write the 'Y' coordinate of the lower left corner of the rectangle: \");\n",
    "            double leftY = Convert.ToDouble(Console.ReadLine());\n",
    "            Console.Write(\"Please write the 'X' coordinate of the upper right corner of the rectangle: \");\n",
    "            double rightX = Convert.ToDouble(Console.ReadLine());\n",
    "            Console.Write(\"Please write the 'Y' coordinate of the upper right corner of the rectangle: \");\n",
    "            double rightY = Convert.ToDouble(Console.ReadLine());\n",
    "            Console.Write(\"Please write the 'X' coordinate of the point you want to test: \");\n",
    "            double pointX = Convert.ToDouble(Console.ReadLine());\n",
    "            Console.Write(\"Please write the 'Y' coordinate of the point you want to test: \");\n",
    "            double pointY = Convert.ToDouble(Console.ReadLine());\n",
    "            inside(pointX, pointY, leftX, leftY, rightX, rightY);\n",
    "\n",
    "\n",
    "        }\n",
    "\n",
    "        private static int inside (double x, double y, double x1,double y1, double x2, double y2)\n",
    "        {\n",
    "            if (x1<=x  &&   x<=x2 && y1<=y && y<=y2)\n",
    "            {\n",
    "                Console.Write(\"\\nTrue, The point {0},{1} is inside the rectangle.\\n\", x,y);\n",
    "                return 1;\n",
    "\n",
    "            }\n",
    "            else\n",
    "            {\n",
    "                Console.Write(\"\\nFalse,The point {0},{1} is not inside the rectangle.\\n\", x, y);\n",
    "                return 1;\n",
    "            }\n",
    "\n",
    "\n",
    "\n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 5 a) Outputs\n",
    "<center><img src=\"Answer5_Test1.png\"></center\n",
    "<center><img src=\"Answer5_Test2.png\"></center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 5 b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "using System;\n",
    "\n",
    "namespace Question5\n",
    "{\n",
    "    class Program\n",
    "    {\n",
    "        static void Main(string[] args)\n",
    "        {\n",
    "\n",
    "            inside(1, 1, 0.3, 0.5, 1.1, 0.7);\n",
    "            //inside(1, 1, 0.5, 0.2, 1.1, 2);\n",
    "\n",
    "\n",
    "        }\n",
    "\n",
    "        private static int inside (double x, double y, double x1,double y1, double x2, double y2)\n",
    "        {\n",
    "            if (x1<=x  &&   x<=x2 && y1<=y && y<=y2)\n",
    "            {\n",
    "                Console.Write(\"\\nTrue, The point {0},{1} is inside the rectangle.\\n\", x,y);\n",
    "                return 1;\n",
    "\n",
    "            }\n",
    "            else\n",
    "            {\n",
    "                Console.Write(\"\\nFalse,The point {0},{1} is not inside the rectangle.\\n\", x, y);\n",
    "                return 1;\n",
    "            }\n",
    "\n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 5 b) Output 1\n",
    "\n",
    "\n",
    "<center><img src=\"Answer5b_Test1.png\"></center\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 5 b) Output 2\n",
    "\n",
    "\n",
    "<center><img src=\"Answer5b_Test2.png\"></center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 6\n",
    ". You can turn a word into pig-Latin using the following two rules (simplified):\n",
    "• If the word starts with a consonant, move that letter to the end and append\n",
    "'ay'. For example, 'happy' becomes 'appyhay' and 'pencil' becomes 'encilpay'.\n",
    "• If the word starts with a vowel, simply append 'way' to the end of the word.\n",
    "For example, 'enter' becomes 'enterway' and 'other' becomes 'otherway' . For\n",
    "our purposes, there are 5 vowels: a, e, i, o, u (so we count y as a consonant).\n",
    "Write a function pig() that takes a word (i.e., a string) as input and returns its pigLatin form. Your function should still work if the input word contains upper case\n",
    "characters. Your output should always be lower case however. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please type a word to turn into pig-Latin: Happy\n",
      "appyhay\n"
     ]
    }
   ],
   "source": [
    "word=input (\"Please type a word to turn into pig-Latin: \")\n",
    "lower_word=word.lower()  #lowering the letters.\n",
    "wordlist=list(lower_word)  #Making list so it can be manipulated.\n",
    "if (wordlist[0]=='a' or wordlist[0]=='e' or wordlist[0]=='i' or wordlist[0]=='o' or wordlist[0]=='u'): #Determining the conditions\n",
    "    wordlist.append(\"way\")\n",
    "    print(\"\".join(wordlist))\n",
    "else:\n",
    "    wordlist.append(wordlist[0])\n",
    "    wordlist.remove(wordlist[0])\n",
    "    wordlist.append(\"ay\")\n",
    "    print(\"\".join(wordlist))  #.join is used to connect the letters so that output can be seen as a word."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 7\n",
    "File bloodtype1.txt records blood-types of patients (A, B, AB, O or OO) at a clinic.\n",
    "Write a function bldcount() that reads the file with name name and reports (i.e.,\n",
    "prints) how many patients there are in each bloodtype."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are  15  patients of blood type A\n",
      "There are  1  patients of blood type B\n",
      "There are  13  patients of blood type AB\n",
      "There are  15  patients of blood type O\n",
      "There are  0  patients of blood type OO\n"
     ]
    }
   ],
   "source": [
    "bloodFile = open(\"bloodtype1.txt\", \"r\")    #Opening file\n",
    "bloodTypes=bloodFile.read()                #Reading and saving data.\n",
    "bloodAB=bloodTypes.count(\"AB\")             #Counting the \"AB\" blood type\n",
    "bloodA=bloodTypes.count(\"A\")-bloodAB       #It was counting the A's insedi the AB so i eject them.\n",
    "bloodB=bloodTypes.count(\"B\")-bloodAB       #It was counting the B's insedi the AB so i eject them.\n",
    "blood00=bloodTypes.count(\"OO\")\n",
    "blood0=bloodTypes.count(\"O\")-blood00       #It was counting the O's insedi the OO so i eject them.\n",
    "print(\"There are \", bloodA, \" patients of blood type A\")\n",
    "print(\"There are \", bloodB, \" patients of blood type B\")\n",
    "print(\"There are \", bloodAB, \" patients of blood type AB\")\n",
    "print(\"There are \", blood0, \" patients of blood type O\")\n",
    "print(\"There are \", blood00, \" patients of blood type OO\")\n",
    "#I think the answer shared in the PS1 pdf is not true. Probably the text data is different."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 8\n",
    "Write a function curconv() that takes as input:\n",
    "1. a currency represented using a string (e.g., 'JPY' for the Japanese Yen or\n",
    "'EUR' for the Euro)\n",
    "2. an amount\n",
    "and then converts and returns the amount in US dollars.\n",
    "The currency rates you will need are stored in file currencies.txt.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUD\t1.0345157\tAustralian Dollar\n",
      "CHF\t1.0237414\tSwiss Franc\n",
      "CNY\t0.1550176\tChinese Yuan\n",
      "DKK\t0.1651442\tDanish Krone\n",
      "EUR\t1.2296544\tEuro\n",
      "GBP\t1.5550989\tBritish Pound\n",
      "HKD\t0.1270207\tHong Kong Dollar\n",
      "INR\t0.0177643\tIndian Rupee\n",
      "JPY\t0.01241401\tJapanese Yen\n",
      "MXN\t0.0751848\tMexican Peso\n",
      "MYR\t0.3145411\tMalaysian Ringgit\n",
      "NOK\t0.1677063\tNorwegian Krone\n",
      "NZD\t0.8003591\tNew Zealand Dollar\n",
      "PHP\t0.0233234\tPhilippine Peso\n",
      "SEK\t0.148269\tSwedish Krona\n",
      "SGD\t0.788871\tSingapore Dollar\n",
      "THB\t0.0313789\tThai Baht\n",
      "Choose the currency: EUR\n",
      "Define the amount you want to exchange: 100\n",
      "122.96544\n"
     ]
    }
   ],
   "source": [
    "currencyFile = open(\"currencies.txt\", \"r\")     #Opening the file\n",
    "currency=currencyFile.read()                   #Reading and saving the data\n",
    "print(currency)                                #Printing so client can see them\n",
    "def curconv(cur,amount):\n",
    "    location=currency.index(cur)               #Defining the location of the currency and saving it into variable\n",
    "    counter=0                                  \n",
    "    for i in range (location+1+len(cur),len(currency)-(location+1)):     #Creating a for loop to find the range of the currency rate\n",
    "        blank=currency[i]\n",
    "        if (blank== \"\t\"):                                              #Breaking the for loop when the array gets to blank again\n",
    "            break;\n",
    "        counter=counter+1                                                #Counting in order to find the location of the currency rate in array\n",
    "    result=(float(currency[location+4:location+4+counter])*float (amount))   #Changing strings in to float so we can multiply them.\n",
    "    print(result)\n",
    "\n",
    "curType=input(\"Choose the currency: \")                                   #Asking client to choose the currency\n",
    "moneyAmount=input(\"Define the amount you want to exchange: \")            #Asking client to define the amount\n",
    "curconv(curType,moneyAmount)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 9\n",
    "Each of the following will cause an exception (an error). Identify what type of\n",
    "exception each will cause.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Error Case                                                   | Error Type                                    |                \n",
    "| :---                                                        |-----------------:                             |          \n",
    "| Trying to add incompatible variables, as in adding 6 + ‘a’  | Type Error                                    |  \n",
    "| Referring to the 12th item of a list that has only 10 items | Index Error                                   | \n",
    "| Using a value that is out of range for a function’s input, such as calling math.sqrt(-1.0) | Value Error    | \n",
    "| Using an undeclared variable, such as print(x) when x has not been defined  | Name Error                    | \n",
    "| Referring to the 12th item of a list that has only 10 items | Index Error                                   | \n",
    "| Trying to open a file that does not exist                   | FileNotFound Error                            | "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 10\n",
    "Encryption is the process of hiding the meaning of a text by substituting letters in the\n",
    "message with other letters, according to some system. If the process is successful, no\n",
    "one but the intended recipient can understand the encrypted message. Cryptanalysis\n",
    "refers to attempts to undo the encryption, even if some details of the encryption are\n",
    "unknown (for example, if an encrypted message has been intercepted). The first step\n",
    "of cryptanalysis is often to build up a table of letter frequencies in the encrypted text.\n",
    "Assume that the string letters is already defined as\n",
    "'abcdefghijklmnopqrstuvwxyz'. Write a function called frequencies()\n",
    "that takes a string as its only parameter, and returns a list of integers, showing the\n",
    "number of times each character app"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please input your message: The quick red fox got bored and went home.\n",
      "[1, 1, 1, 3, 5, 1, 1, 2, 1, 0, 1, 0, 1, 2, 4, 0, 1, 2, 0, 2, 1, 0, 1, 1, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "stringLetters= \"abcdefghijklmnopqrstuvwxyz\"         #Defining the string letters\n",
    "cryptedMessage=[]                                   #Defininge a empty array\n",
    "def frequencies (message):\n",
    "        for i in range(0,len(stringLetters)):       #Loop goes on the length of the string letters so that check every letter.\n",
    "            cryptedMessage.append((message.count(stringLetters[i]))) #Appending the array that we defined.\n",
    "        print(cryptedMessage)\n",
    "    \n",
    "inputMessage= input(\"Please input your message: \")\n",
    "frequencies(inputMessage)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
